<template>
    <view class="page page-index">
        <login bindloginSuccess="loginSuccess" />
        <nav-bar
            isBack="{{false}}"
            navBarTitle="{{sysTitle}}"
            custom="{{titleCustom}}"
            placeholder="{{false}}"
        ></nav-bar>
        <view class="index-top">
            <view class="baby-manage-wrap">
                <view class="manage-item" bindtap="openBody">
                    <view class="t1">身高</view>
                    <view class="t2"><text class="font-number">{{ statics.height || 0 }}</text>CM</view>
                </view>
                <view class="manage-item" bindtap="openBody">
                    <view class="t1">体重</view>
                    <view class="t2"><text class="font-number">{{ statics.width || 0 }}</text>KG</view>
                </view>
                <view class="manage-item" bindtap="openMilestone">
                    <view class="t1">里程碑</view>
                    <view class="t2"><text class="font-number">{{ statics.mile || 0 }}</text>个</view>
                </view>
                <view class="manage-item" wx:if="{{ auto }}">
                    <view class="t1">日记</view>
                    <view class="t2"><text class="font-number">{{ statics.notes || 0 }}</text>篇</view>
                </view>
            </view>
            <image class="icon-tree" src="../assets/image/tree.png" mode="widthFix"></image>
        </view>
        <view class="index-container">
            <view class="title" bindtap="baby">
                <view class="font-content">
                    {{ child ? child.name : sysTitle }}
                    <text class="font-number">{{ child ? child.days : '点击添加宝宝' }}</text>
                </view>
                <view class="baby-head">
                    <image src="{{child ? child.headUrl : defaultHeadUrl}}" />
                </view>
            </view>

            <view class="dateline">
                <view wx:for="{{nodes}}">
                    <view class="date">{{ item.date }}</view>
                    <view class="content">
                        <view class="active-item" wx:for="{{ item.nodes }}" bindtap="itemdate(item.date, item.openid)">
                            <view class="ti">{{ item.showDate }}</view>
                            <view class="thumb">
                                <view class="text">
                                    {{ item.textContent }}
                                </view>
                            </view>
                            <view class="author">{{ item.insert }}</view>
                        </view>
                    </view>
                </view>
                <view class="nothing" wx:if="{{ nodes.length <= 0 }}">( ´◔ ‸◔`) 噗！暂无数据 ~~</view>

            </view>
        </view>
        <view class="btn-add" bindtap="add">
            <van-icon name="plus" />
        </view>
        <van-toast id="van-toast" />
        <van-dialog id="van-dialog" />
    </view>
</template>

<script>
const $this = getApp()
import { createPage } from '@mpxjs/core'
import Notify from '@vant/weapp/dist/notify/notify'
import { sysTitle, defaultHeadUrl } from '../constant'
createPage({
    data() {
        return {
            sysTitle,
            defaultHeadUrl,
            titleCustom: false,
            page: 1,
            child: {},
            nodes: [],
            srcNodes: [],
            statics: {},
            shareChild: null,
            auto: false
        }
    },

    onLoad(opt) {
        $this.http.call('config').then(res => {
            this.auto = res.data.data[0].auto || false
        })
        this.shareChild = opt.child || null // 别人分享的
        // Notify({ type: 'danger', message: '通知内容' });
        this.getNotes()
        this.getInfo()
    },

    onPageScroll(e) {
        this.titleCustom = e.scrollTop > 80
    },

    onReachBottom(){
        this.page++
        this.getNotes()
    },

    onPullDownRefresh(){
        this.page = 1
        this.getNotes()
        this.getInfo()
    },

    methods: {
        itemdate(date, openid) {
            wx.navigateTo({ url: `note?date=${date || ''}&openid=${openid || ''}` })
        },
        getStatis(child) {
            if(!child) return false
            $this.http.call('statis', { child }).then(res => {
                this.statics = res.data
            })
        },
        getInfo() {
            $this.loading.open()
            $this.http.call('childInfo').then(res => {
                $this.loading.close()
                this.child = res.data[0]
                $this.store.commit('setChild', res.data[0])
                this.getStatis(res.data && res.data[0] && res.data[0]._id || '')
                // 分享添加baby
                if(this.shareChild && !this.child){
                    console.log("getInfo -> this.shareChild", this.shareChild)
                    $this.http.call('childAdd', {child: this.shareChild}).then(res => {
                        this.getInfo()
                    })
                }
            })
        },
        getNotes() {
            $this.http.call('noteList', {page: this.page}).then(res => {
                $this.loading.close()
                wx.stopPullDownRefresh()
                const data = this.page === 1 ? res.data.data : this.srcNodes.concat(res.data.data || [])
                this.srcNodes = data
                let u = [],
                    i = 0
                ;(data || []).forEach((item, index) => {
                    let spi = (item.date && item.date.split('.')) || []
                    let _date = `${spi[0]}年${spi[1]}月`
                    item.showDate = spi[2] || ''
                    item.insert = new Date(item.insertDate).format('hh点mm分')
                    if(index >= 1 && (data[index].date.split('.')[0] + '' + data[index].date.split('.')[1]) != (data[index-1].date.split('.')[0] + '' + data[index-1].date.split('.')[1])){
                        i++
                    }
                    if (!u[i]) {
                        u[i] = {
                            date: _date,
                            nodes: []
                        }
                    }
                    u[i].nodes.push(item)
                })
                this.nodes = u
            })
        },
        openMilestone() {
            if(!this.child){
                $this.toast('fail', '请先添加宝宝')
                return false
            }
            wx.navigateTo({ url: 'milestone' })
        },
        openBody() {
            if(!this.child){
                $this.toast('fail', '请先添加宝宝')
                return false
            }
            wx.navigateTo({ url: 'body' })
        },
        baby() {
            wx.navigateTo({ url: 'child' })
        },
        showToast() {
            // $this.toast('哈哈哈').then(res => { console.log(res) })
            $this.dialog.confirm('标题', '你好啊')
        },
        onClickLeft() {},
        onClickRight() {},
        loginSuccess() {},
        add() {
            if(!this.child){
                $this.toast('fail', '请先添加宝宝')
                return false
            }
            wx.navigateTo({ url: 'note' })
        }
    }
})
// "enablePullDownRefresh": true
</script>

<script type="application/json">
{
    "enablePullDownRefresh": true,
    "usingComponents": {
        "van-notify": "@vant/weapp/dist/notify/index",
        "login": "../components/login"
    }
}
</script>
